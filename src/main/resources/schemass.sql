--DROP TABLE IF EXISTS USER;
/*
CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	USER_ID INTEGER NOT NULL,
	EMAIL VARCHAR_IGNORECASE,
	LOGIN VARCHAR_IGNORECASE,
	NAME VARCHAR_IGNORECASE,
	BIRTHDAY DATE,
	CONSTRAINT USER_PK PRIMARY KEY (USER_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_2 ON PUBLIC.USERS (USER_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.GENRE (
	NAME VARCHAR_IGNORECASE NOT NULL,
	CONSTRAINT GENRE_PK PRIMARY KEY (NAME)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_4 ON PUBLIC.GENRE (NAME);

CREATE TABLE IF NOT EXISTS PUBLIC.RATING (
	NAME VARCHAR_IGNORECASE NOT NULL,
	CONSTRAINT RATING_PK PRIMARY KEY (NAME)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_8 ON PUBLIC.RATING (NAME);

CREATE TABLE IF NOT EXISTS PUBLIC.FILM (
	FILM_ID INTEGER NOT NULL,
	NAME VARCHAR_IGNORECASE,
	DESCRIPTION VARCHAR_IGNORECASE,
	RELEASEDATE DATE,
	DURATION INTEGER,
	GENRE VARCHAR_IGNORECASE,
	RATING VARCHAR_IGNORECASE,
	CONSTRAINT FILM_FK PRIMARY KEY (NAME,GENRE),
	CONSTRAINT FILM_FK FOREIGN KEY (GENRE) REFERENCES PUBLIC.GENRE(NAME) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT FILM_FK_1 FOREIGN KEY (RATING) REFERENCES PUBLIC.RATING(NAME) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS FILM_FK_1_INDEX_2 ON PUBLIC.FILM (RATING);
CREATE INDEX IF NOT EXISTS FILM_FK_INDEX_2 ON PUBLIC.FILM (GENRE);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_20 ON PUBLIC.FILM (FILM_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.LIKES (
	USER_ID INTEGER,
	FILM_ID INTEGER,
	CONSTRAINT LIKE_FK PRIMARY KEY (USER_ID,FILM_ID),
	CONSTRAINT LIKE_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT LIKE_FK_1 FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILM(FILM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS LIKE_FK_1_INDEX_2 ON PUBLIC.LIKES (FILM_ID);
CREATE INDEX IF NOT EXISTS LIKE_FK_INDEX_2 ON PUBLIC.LIKES (USER_ID);

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDSHIP (
	REQUESTER INTEGER,
	RECIPIENT INTEGER,
	APPROVED BOOLEAN,
	CONSTRAINT FRIENDSHIP_FK PRIMARY KEY (REQUESTER, RECIPIENT),
	CONSTRAINT FRIENDSHIP_FK FOREIGN KEY (REQUESTER) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT FRIENDSHIP_FK_1 FOREIGN KEY (RECIPIENT) REFERENCES PUBLIC.USES(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS FRIENDSHIP_FK_1_INDEX_B ON PUBLIC.FRIENDSHIP (RECIPIENT);
CREATE INDEX IF NOT EXISTS FRIENDSHIP_FK_INDEX_B ON PUBLIC.FRIENDSHIP (REQUESTER); */
*/